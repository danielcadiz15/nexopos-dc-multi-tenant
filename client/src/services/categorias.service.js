// src/services/categorias.service.js - MIGRADO A FIREBASE
import FirebaseService from './firebase.service';

/**
 * Servicio para gesti√≥n de categor√≠as con Firebase
 * Migrado completamente a Firebase Functions
 */
class CategoriasService extends FirebaseService {
  constructor() {
    super('/categorias'); // M√≥dulo en Firebase Functions
  }

  /**
   * Obtiene todas las categor√≠as
   * @returns {Promise<Array>} Lista de categor√≠as
   */
  async obtenerTodos() {
    try {
      console.log('üîÑ Obteniendo todas las categor√≠as...');
      const categorias = await this.get('');
      
      // Asegurar que siempre sea un array
      const categoriasArray = this.ensureArray(categorias);
      
      if (categoriasArray.length === 0) {
        console.log('‚ö†Ô∏è No hay categor√≠as creadas');
        return [];
      }
      
      console.log(`‚úÖ Categor√≠as cargadas: ${categoriasArray.length}`);
      return categoriasArray;
      
    } catch (error) {
      console.error('‚ùå Error al obtener categor√≠as:', error);
      return [];
    }
  }

  /**
   * Alias para compatibilidad con c√≥digo existente
   */
  async obtenerTodas() {
    return this.obtenerTodos();
  }

  /**
   * Obtiene categor√≠as activas
   * @returns {Promise<Array>} Lista de categor√≠as activas
   */
  async obtenerActivas() {
    try {
      console.log('üîÑ Obteniendo categor√≠as activas...');
      const categorias = await this.get('/activas');
      
      const categoriasArray = this.ensureArray(categorias);
      
      if (categoriasArray.length === 0) {
        return [];
      }
      
      console.log(`‚úÖ Categor√≠as activas: ${categoriasArray.length}`);
      return categoriasArray;
      
    } catch (error) {
      console.error('‚ùå Error al obtener categor√≠as activas:', error);
      return [];
    }
  }

  /**
   * Obtiene una categor√≠a por su ID
   * @param {string} id - ID de la categor√≠a
   * @returns {Promise<Object>} Categor√≠a
   */
  async obtenerPorId(id) {
    try {
      console.log(`üîÑ Obteniendo categor√≠a ID: ${id}`);
      const categoria = await this.get(`/${id}`);
      
      const categoriaObj = this.ensureObject(categoria);
      
      if (!categoriaObj || Object.keys(categoriaObj).length === 0) {
        throw new Error(`Categor√≠a ${id} no encontrada`);
      }
      
      console.log(`‚úÖ Categor√≠a obtenida:`, categoriaObj);
      return categoriaObj;
      
    } catch (error) {
      console.error(`‚ùå Error al obtener categor√≠a ${id}:`, error);
      throw error;
    }
  }

  /**
   * Crea una nueva categor√≠a
   * @param {Object} categoria - Datos de la categor√≠a
   * @returns {Promise<Object>} Categor√≠a creada
   */
  async crear(categoria) {
    try {
      console.log('üÜï Creando categor√≠a:', categoria);
      
      // Formatear datos de la categor√≠a
      const categoriaFormateada = {
        ...categoria,
        nombre: categoria.nombre?.trim() || '',
        descripcion: categoria.descripcion?.trim() || '',
        activo: categoria.activo !== false // Por defecto true
      };
      
      // Validaci√≥n b√°sica
      if (!categoriaFormateada.nombre) {
        throw new Error('El nombre de la categor√≠a es requerido');
      }
      
      const resultado = await this.post('', categoriaFormateada);
      console.log('‚úÖ Categor√≠a creada:', resultado);
      
      return resultado;
    } catch (error) {
      console.error('‚ùå Error al crear categor√≠a:', error);
      throw error;
    }
  }

  /**
   * Actualiza una categor√≠a existente
   * @param {string} id - ID de la categor√≠a
   * @param {Object} categoria - Nuevos datos
   * @returns {Promise<Object>} Respuesta de la actualizaci√≥n
   */
  async actualizar(id, categoria) {
    try {
      console.log(`üîÑ Actualizando categor√≠a ${id}:`, categoria);
      
      // Formatear datos de la categor√≠a
      const categoriaFormateada = {
        ...categoria,
        nombre: categoria.nombre?.trim() || '',
        descripcion: categoria.descripcion?.trim() || ''
      };
      
      // Validaci√≥n b√°sica
      if (!categoriaFormateada.nombre) {
        throw new Error('El nombre de la categor√≠a es requerido');
      }
      
      const resultado = await this.put(`/${id}`, categoriaFormateada);
      console.log('‚úÖ Categor√≠a actualizada:', resultado);
      
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al actualizar categor√≠a ${id}:`, error);
      throw error;
    }
  }

  /**
   * Elimina una categor√≠a
   * @param {string} id - ID de la categor√≠a
   * @returns {Promise<Object>} Respuesta de la eliminaci√≥n
   */
  async eliminar(id) {
    try {
      console.log(`üóëÔ∏è Eliminando categor√≠a ${id}`);
      const resultado = await this.delete(`/${id}`);
      console.log('‚úÖ Categor√≠a eliminada:', resultado);
      
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al eliminar categor√≠a ${id}:`, error);
      throw error;
    }
  }

  /**
   * Busca categor√≠as por nombre
   * @param {string} termino - T√©rmino de b√∫squeda
   * @returns {Promise<Array>} Categor√≠as encontradas
   */
  async buscar(termino) {
    try {
      console.log('üîç Buscando categor√≠as:', termino);
      
      if (!termino || !termino.trim()) {
        return await this.obtenerTodos();
      }
      
      const categorias = await this.get('/buscar', { termino: termino.trim() });
      
      const categoriasArray = this.ensureArray(categorias);
      
      if (categoriasArray.length === 0) {
        return [];
      }
      
      console.log(`‚úÖ Categor√≠as encontradas: ${categoriasArray.length}`);
      return categoriasArray;
      
    } catch (error) {
      console.error('‚ùå Error al buscar categor√≠as:', error);
      return [];
    }
  }

  /**
   * Obtiene el n√∫mero de productos por categor√≠a
   * @param {string} id - ID de la categor√≠a
   * @returns {Promise<number>} N√∫mero de productos
   */
  async contarProductos(id) {
    try {
      console.log(`üîÑ Contando productos de categor√≠a ${id}`);
      const resultado = await this.get(`/${id}/productos/count`);
      
      const count = typeof resultado === 'number' ? resultado : (resultado?.count || 0);
      console.log(`‚úÖ Productos en categor√≠a ${id}: ${count}`);
      
      return count;
    } catch (error) {
      console.error(`‚ùå Error al contar productos de categor√≠a ${id}:`, error);
      return 0;
    }
  }
}

export default new CategoriasService();