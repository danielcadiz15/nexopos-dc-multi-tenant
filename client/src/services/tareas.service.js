import { collection, addDoc, updateDoc, deleteDoc, doc, getDocs, query, orderBy, where, serverTimestamp } from "firebase/firestore"; import { db } from "../firebase/config"; const TAREAS_COLLECTION = "tareas"; const HISTORIAL_TAREAS_COLLECTION = "historial_tareas"; export class TareasService { static async obtenerTareas() { try { const q = query(collection(db, TAREAS_COLLECTION), orderBy("fechaCreacion", "desc")); const querySnapshot = await getDocs(q); return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), fechaCreacion: doc.data().fechaCreacion?.toDate?.() || doc.data().fechaCreacion, fechaLimite: doc.data().fechaLimite?.toDate?.() || doc.data().fechaLimite, fechaCompletado: doc.data().fechaCompletado?.toDate?.() || doc.data().fechaCompletado })); } catch (error) { console.error("Error al obtener tareas:", error); throw error; } } static async crearTarea(tareaData) { try { const tarea = { ...tareaData, fechaCreacion: serverTimestamp(), completada: false, fechaCompletado: null, historial: [{ accion: "creada", fecha: serverTimestamp(), usuario: tareaData.usuario || "Usuario Actual" }] }; const docRef = await addDoc(collection(db, TAREAS_COLLECTION), tarea); await this.agregarAlHistorial(docRef.id, "creada", tareaData.usuario || "Usuario Actual"); return { id: docRef.id, ...tarea }; } catch (error) { console.error("Error al crear tarea:", error); throw error; } } static async actualizarTarea(id, tareaData) { try { const tareaRef = doc(db, TAREAS_COLLECTION, id); const tareaActualizada = { ...tareaData, fechaModificacion: serverTimestamp() }; await updateDoc(tareaRef, tareaActualizada); await this.agregarAlHistorial(id, "modificada", tareaData.usuario || "Usuario Actual"); return { id, ...tareaActualizada }; } catch (error) { console.error("Error al actualizar tarea:", error); throw error; } } static async cambiarEstadoCompletada(id, completada, usuario) { try { const tareaRef = doc(db, TAREAS_COLLECTION, id); const accion = completada ? "completada" : "marcada como pendiente"; const tareaActualizada = { completada, fechaCompletado: completada ? serverTimestamp() : null, fechaModificacion: serverTimestamp() }; await updateDoc(tareaRef, tareaActualizada); await this.agregarAlHistorial(id, accion, usuario || "Usuario Actual"); return { id, ...tareaActualizada }; } catch (error) { console.error("Error al cambiar estado de tarea:", error); throw error; } } static async eliminarTarea(id, usuario) { try { await this.agregarAlHistorial(id, "eliminada", usuario || "Usuario Actual"); await deleteDoc(doc(db, TAREAS_COLLECTION, id)); return { id }; } catch (error) { console.error("Error al eliminar tarea:", error); throw error; } } static async obtenerHistorialTarea(id) { try { const q = query(collection(db, TAREAS_COLLECTION), where("tareaId", "==", id), orderBy("fecha", "desc")); const querySnapshot = await getDocs(q); return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), fecha: doc.data().fecha?.toDate?.() || doc.data().fecha })); } catch (error) { console.error("Error al obtener historial de tarea:", error); throw error; } } static async obtenerHistorialGeneral(limit = 50) { try { const q = query(collection(db, HISTORIAL_TAREAS_COLLECTION), orderBy("fecha", "desc"), limit); const querySnapshot = await getDocs(q); return querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data(), fecha: doc.data().fecha?.toDate?.() || doc.data().fecha })); } catch (error) { console.error("Error al obtener historial general:", error); throw error; } } static async agregarAlHistorial(tareaId, accion, usuario, cambios = null) { try { const entradaHistorial = { tareaId, accion, usuario, fecha: serverTimestamp() }; await addDoc(collection(db, HISTORIAL_TAREAS_COLLECTION), entradaHistorial); } catch (error) { console.error("Error al agregar al historial:", error); } } } export default TareasService;
